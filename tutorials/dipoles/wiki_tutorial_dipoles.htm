<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title></title>
<link rel="stylesheet" type="text/css" href="remark_files/remark.css" />
<link rel="stylesheet" type="text/css" href="remark_files/pygments.css" />
<script type="text/javascript" src="remark_files/ASCIIMathMLwFallback.js"></script>

</head>
<body>
<div id = "remark-all">
<div id = "remark">
<div class = "ParentList">

<ol>
<li><a href="wiki_tutorial_dipoles.htm" /></li>
</ol>
</div>

<div class = "remark-end-list"></div>

<p>====== Tutorial: Simulating and estimating EEG sources ======</p>
<p>In this tutorial we will learn how simple intracerebral current sources can 
generate complicated patterns of EEG potentials at the scalp.
We will then see how, under certain conditions, the underlying
//EEG sources// can be effectively localized from the scalp measurements. 
However, the tutorial also aims to illustrate how the solution to 
the //inverse EEG problem// can be easily confounded e.g. by the presence of 
noisy background EEG activity. </p>
<p>Below you can download the slides of a presentation that deals with 
the topic of this tutorial:</p>
<p>{{http://www.kasku.org/tutorials/tutorial_dipoles/slides.pdf|Download the slides}}</p>
<p>====== Download and Installation ======</p>
<p>Please download the 
{{http://www.kasku.org/tutorials/tutorial_dipoles/tutorial_dipoles.zip|tutorial files}}
 and uncompress the .zip  file. Then simply add directory ''tutorial_dipoles'' and all its 
subdirectories to your MATLAB's path. To add a directory and all its subdirectories to
 MATLAB's path you can use MATLAB's command:</p>
<p>addpath(genpath('M:/mypath/tutorial_dipoles'))</p>
<p>where ''M:/mypath/tutorial_dipoles'' is the location where you uncompressed
the .zip file.</p>
<p><strong>Note:</strong> The tutorial .zip file contains the tutorial code, the 
required data files and this documentation in HTML format. You can browse
the documentation offline by opening with your web browser file 
''index.htm'', which is found under folder ''tutorial_dipoles''.</p>
<p>====== Dependencies ======</p>
<p>The tutorial should work under MATLAB R2010a or newer. It is likely to work
also under not too much older MATLAB versions. The tutorial makes use of the
following freely available MATLAB toolboxes:</p>
<p>{{http://fieldtrip.fcdonders.nl/|Fieldtrip MATLAB toolbox}}</p>
<p>For convenience, all the dependencies have been included in the tutorial 
.zip package so that you don't need to download them separately. </p>
<p><strong>Note:</strong> The tutorial uses the 3D rendering capabilities of the OpenGL 
implementation that is included with your operating system. As OpenGL 
support differ slightly between operating systems there is a small chance
that some of the figures will display differently in different operating 
systems. The figures shown in the tutorial have been generated in 
Windows 7. </p>
<p>====== Getting help ======</p>
<p>The tutorial instructions explain just a small fraction of the 
tutorial scripts' features. You can always get a more detailed help of 
individual MATLAB functions using the command ''help'' followed by the
name of the relevant function. For instance, the command:</p>
<pre><code>help plot
</code></pre>
<p>will display the help of MATLAB's built-in ''plot'' command. </p>
<p>====== MATLAB classes ======</p>
<p>====  What are classes and objects? ==== </p>
<p>The tutorial makes use of 
{{http://www.mathworks.nl/help/techdoc/matlab_oop/brh2rgw.html|MATLAB's classes}}. 
Do not get get intimidated by the term. A class is just a //user-defined data type//.
 MATLAB comes with lots of built-in data types. For instance ''double'' and ''single''
are two types that can store numeric data:</p>
<pre><code>x = 5;
</code></pre>
<p>The variable ''x'' above is now an //instance// (also called 
an //object//) of class ''double''. You can find out the classes of the variables
in your MATLAB's workspace using the command ''whos''. The result could be
something like this:</p>
<pre><code>&gt;&gt; whos
  Name        Size              Bytes  Class       Attributes

  myHead      1x1             2805970  head.mri              
  x           1x1                   8  double                
  y           1x1                   8  double
</code></pre>
<p>where you can see that variable ''x'' is an object of class ''double'' and variable
''myHead'' is an object of class ''head.mri''. The latter is a class that we 
have defined specifically for the purposes of this tutorial. </p>
<p>It is important to realize the difference between a //class// and an //object//. 
In the example above, ''x'' and ''y'' are two different objects of the same class.</p>
<p>====  What are class methods? ==== </p>
<p>One of the great advantages of using objects with MATLAB is that it allows you
to {{http://en.wikipedia.org/wiki/Function_overloading|overloading}}
 function names. For instance, if you run the 
command:</p>
<pre><code>plot(myHead);
</code></pre>
<p>MATLAB will first check whether a specialized //method// ''plot()'' has been defined
 for class ''head.mri''. If such method exists then it will run that method
 instead of MATLAB's built-in function ''plot()''. A ''head.mri'' object contains a 
head model and a ''double'' object contains just numbers. Indeed, plotting such
 different data types involve very different operations. Thus, it makes sense
that different versions of ''plot'' are called, depending on the //class// of what
 you want to be plotted. Remember: the specialized version of ''plot()'' that
 takes care of plotting ''mri.head'' objects is called a //method// of class 
 ''mri.head''.</p>
<p>==== Getting help on class' methods ====</p>
<p>Imagine that you want to get some help on method ''plot()'' for objects of class
''mri.head''. You could try to do this:</p>
<pre><code>help plot
</code></pre>
<p>but you will find that the help that is displayed corresponds to MATLAB's 
built-in ''plot()'' instead of corresponding to method ''plot()'' of class 
''mri.head''. Only if you read until the end of the help that is displayed you
will see a section that reads ''Overloaded methods'' and that lists several
other functions that are also called ''plot()'', and that will be called 
instead of the built-in, depending on the type of the input argument. 
If you already installed the tutorial scripts you should see in that list
a link reading ''head.mri''. If you click that link you will get the help that
you were looking for. Alternatively, you could have just used the command:</p>
<pre><code>help head.mri.plot
</code></pre>
<p>====== Questions and feedback ====== </p>
<p>This tutorial has been prepared for the course 
,
 given at the {{http://www.vu.nl/en/|VU University}}, and organized by 
{{http://www.bio.vu.nl/enf/linkenkaer/|Klaus Linkenkaer-Hansen}}. The author of the tutorial is 
{{http://www.kasku.org|German Gomez-Herrero}}. </p>
<p>As both code and documentation has been made from scratch for the 
year 2011 course, it is likely that you will find bugs and typos. 
Please report those to <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#103;&#101;&#114;&#109;&#97;&#110;&#46;&#103;&#111;&#109;&#101;&#122;&#104;&#101;&#114;&#114;&#101;&#114;&#111;&#64;&#107;&#97;&#115;&#107;&#117;&#46;&#111;&#114;&#103;">&#103;&#101;&#114;&#109;&#97;&#110;&#46;&#103;&#111;&#109;&#101;&#122;&#104;&#101;&#114;&#114;&#101;&#114;&#111;&#64;&#107;&#97;&#115;&#107;&#117;&#46;&#111;&#114;&#103;</a> so that I can fix them.
 I would also  appreciate any feedback (positive or negative) on the tutorial contents
so that I can improve it. </p>
<p>====== Tutorial steps ====== </p>
<p>The tutorial consists of three parts. Follow the links below to each of those parts:</p>
<ul>
<li />
<li />
<li />
</ul>
</div>
<div id="remark-footer">
<p><a href="http://kaba.hilvi.org/remark">Remark 1.5.1</a> - Page generated 23.07.2013 13:45.</p>
</div>
</div>
</body>
</html>
